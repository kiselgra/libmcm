/* 
 * Autogenerated by rtgen. Licenced under the terms of the GPL.
 */

#ifndef __CGEN_vectors_H__
#define __CGEN_vectors_H__
#include "stdbool.h"
#include "math.h"

#ifdef __cplusplus
extern "C" {
#endif


typedef struct {
	double x;
	double y;
} vec2d;


typedef struct {
	float x;
	float y;
} vec2f;


typedef struct {
	double x;
	double y;
	double z;
} vec3d;


typedef struct {
	float x;
	float y;
	float z;
} vec3f;


typedef struct {
	int x;
	int y;
	int z;
} vec3i;


typedef struct {
	double x;
	double y;
	double z;
	double w;
} vec4d;


typedef struct {
	float x;
	float y;
	float z;
	float w;
} vec4f;


void cross_vec3d(vec3d *out, const vec3d *lhs, const vec3d *rhs);
void cross_vec3f(vec3f *out, const vec3f *lhs, const vec3f *rhs);
void set_vec4d_component_val(const vec4d *v, int c, double newval);
void set_vec4f_component_val(const vec4f *v, int c, float newval);
void set_vec3d_component_val(const vec3d *v, int c, double newval);
void set_vec3f_component_val(const vec3f *v, int c, float newval);
void set_vec2d_component_val(const vec2d *v, int c, double newval);
void set_vec2f_component_val(const vec2f *v, int c, float newval);
void make_vec2d(vec2d *v, double x, double y);
void make_vec2f(vec2f *v, float x, float y);
double vec4d_component_val(const vec4d *v, int c);
float vec4f_component_val(const vec4f *v, int c);
void make_vec3d(vec3d *v, double x, double y, double z);
void make_vec3f(vec3f *v, float x, float y, float z);
double vec3d_component_val(const vec3d *v, int c);
float vec3f_component_val(const vec3f *v, int c);
void make_vec4d(vec4d *v, double x, double y, double z, double w);
void make_vec4f(vec4f *v, float x, float y, float z, float w);
double vec2d_component_val(const vec2d *v, int c);
float vec2f_component_val(const vec2f *v, int c);
void copy_vec2d(vec2d *out, const vec2d *in);
void copy_vec2f(vec2f *out, const vec2f *in);
void div_vec4d_by_scalar(vec4d *out, const vec4d *lhs, double rhs);
void div_vec4f_by_scalar(vec4f *out, const vec4f *lhs, float rhs);
void copy_vec3d(vec3d *out, const vec3d *in);
void copy_vec3f(vec3f *out, const vec3f *in);
void div_vec3d_by_scalar(vec3d *out, const vec3d *lhs, double rhs);
void div_vec3f_by_scalar(vec3f *out, const vec3f *lhs, float rhs);
void copy_vec4d(vec4d *out, const vec4d *in);
void copy_vec4f(vec4f *out, const vec4f *in);
void div_vec2d_by_scalar(vec2d *out, const vec2d *lhs, double rhs);
void div_vec2f_by_scalar(vec2f *out, const vec2f *lhs, float rhs);
bool equal_under_eps_vec2d(const vec2d *a, const vec2d *b, double eps);
bool equal_under_eps_vec2f(const vec2f *a, const vec2f *b, float eps);
void mul_vec4d_by_scalar(vec4d *out, const vec4d *lhs, double rhs);
void mul_vec4f_by_scalar(vec4f *out, const vec4f *lhs, float rhs);
bool equal_under_eps_vec3d(const vec3d *a, const vec3d *b, double eps);
bool equal_under_eps_vec3f(const vec3f *a, const vec3f *b, float eps);
void mul_vec3d_by_scalar(vec3d *out, const vec3d *lhs, double rhs);
void mul_vec3f_by_scalar(vec3f *out, const vec3f *lhs, float rhs);
bool equal_under_eps_vec4d(const vec4d *a, const vec4d *b, double eps);
bool equal_under_eps_vec4f(const vec4f *a, const vec4f *b, float eps);
void mul_vec2d_by_scalar(vec2d *out, const vec2d *lhs, double rhs);
void mul_vec2f_by_scalar(vec2f *out, const vec2f *lhs, float rhs);
double dot_vec2d(const vec2d *lhs, const vec2d *rhs);
float dot_vec2f(const vec2f *lhs, const vec2f *rhs);
void div_components_vec4d(vec4d *out, const vec4d *lhs, const vec4d *rhs);
void div_components_vec4f(vec4f *out, const vec4f *lhs, const vec4f *rhs);
double dot_vec3d(const vec3d *lhs, const vec3d *rhs);
float dot_vec3f(const vec3f *lhs, const vec3f *rhs);
void div_components_vec3d(vec3d *out, const vec3d *lhs, const vec3d *rhs);
void div_components_vec3f(vec3f *out, const vec3f *lhs, const vec3f *rhs);
double dot_vec4d(const vec4d *lhs, const vec4d *rhs);
float dot_vec4f(const vec4f *lhs, const vec4f *rhs);
void div_components_vec2d(vec2d *out, const vec2d *lhs, const vec2d *rhs);
void div_components_vec2f(vec2f *out, const vec2f *lhs, const vec2f *rhs);
double length_of_vec2d(const vec2d *v);
float length_of_vec2f(const vec2f *v);
void mul_components_vec4d(vec4d *out, const vec4d *lhs, const vec4d *rhs);
void mul_components_vec4f(vec4f *out, const vec4f *lhs, const vec4f *rhs);
double length_of_vec3d(const vec3d *v);
float length_of_vec3f(const vec3f *v);
void mul_components_vec3d(vec3d *out, const vec3d *lhs, const vec3d *rhs);
void mul_components_vec3f(vec3f *out, const vec3f *lhs, const vec3f *rhs);
double length_of_vec4d(const vec4d *v);
float length_of_vec4f(const vec4f *v);
void mul_components_vec2d(vec2d *out, const vec2d *lhs, const vec2d *rhs);
void mul_components_vec2f(vec2f *out, const vec2f *lhs, const vec2f *rhs);
void normalize_vec2d(vec2d *v);
void normalize_vec2f(vec2f *v);
void sub_components_vec4d(vec4d *out, const vec4d *lhs, const vec4d *rhs);
void sub_components_vec4f(vec4f *out, const vec4f *lhs, const vec4f *rhs);
void normalize_vec3d(vec3d *v);
void normalize_vec3f(vec3f *v);
void sub_components_vec3d(vec3d *out, const vec3d *lhs, const vec3d *rhs);
void sub_components_vec3f(vec3f *out, const vec3f *lhs, const vec3f *rhs);
void normalize_vec4d(vec4d *v);
void normalize_vec4f(vec4f *v);
void sub_components_vec2d(vec2d *out, const vec2d *lhs, const vec2d *rhs);
void sub_components_vec2f(vec2f *out, const vec2f *lhs, const vec2f *rhs);
void add_components_vec2d(vec2d *out, const vec2d *lhs, const vec2d *rhs);
void add_components_vec2f(vec2f *out, const vec2f *lhs, const vec2f *rhs);
void add_components_vec4d(vec4d *out, const vec4d *lhs, const vec4d *rhs);
void add_components_vec4f(vec4f *out, const vec4f *lhs, const vec4f *rhs);
void add_components_vec3d(vec3d *out, const vec3d *lhs, const vec3d *rhs);
void add_components_vec3f(vec3f *out, const vec3f *lhs, const vec3f *rhs);


#ifdef __cplusplus
}
#endif

#endif
